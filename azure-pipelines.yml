parameters:
- name: VMSIZE
  displayName: 'VM Size'
  type: string
  default: D48as_v4
  values:
  - D96as_v4
  - D64as_v4
  - D48as_v4
  - D32as_v4
  - D16as_v4
  - D8as_v4

- name: STORAGE_ACCOUNT_RG 
  displayName: 'Storage Account Resource Group'
  type: string
  default: "FMC-SA"

- name: STORAGE_ACCOUNT
  displayName: 'Storage Account'
  type: string
  default: "fmcsequencing"

- name: INPUT_CONTAINER
  displayName: 'Input Container'
  type: string
  default: "input"

- name: INPUT_PATH
  displayName: 'Input Path in Container'
  type: string
  default: "*.fastq"

- name: OUTPUT_CONTAINER
  displayName: 'Output Container'
  type: string
  default: "output"

- name: OUTPUT_PATH
  displayName: 'Output Path in Container'
  type: string
  default: "./"

- name: DESTROY
  displayName: 'Destroy infra after successful run?'
  type: boolean
  default: true

- name: SNAPSHOT
  displayName: 'Snapshot data disk after successful run?'
  type: boolean
  default: true

- name: STOPVM
  displayName: 'Stop VM after job?'
  type: boolean
  default: true

variables:
- name: DECODE_PERCENTS
  value: false

trigger: none
pr: none

jobs:
- job: sequencing
  timeoutInMinutes: 0
  variables:
    TF_STORAGE_ACCT_NAME: tfstateacct0693
    TF_STORAGE_CONT_NAME: tfcont-0693 
    TF_STATE_FILE: terraform.tfstate 
    STORAGE_RG: FMC-SA
    #pool: ubuntu-18.04-vmss
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  #KEY VAULT TASK
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'TFSTATE-RG-READ-SP-terraform-fmc'
      KeyVaultName: 'mykeyzvault'
      SecretsFilter: 'sp-client-id-tf-0693,sp-cert-tf-0693,sp-tenant-id-tf-0693,sp-subscription-id-tf-0693,ak-backend-sa-0693'
    displayName: 'Get key vault secrets as pipeline variables'

  # TERRAFORM VERSION
  - script: |
      terraform version
    displayName: 'Get Terraform Version'

  - script: |
      echo "$(sp-cert-tf-0693)" > service-principal.pfx.b64
      base64 --decode service-principal.pfx.b64 > service-principal.pfx
      openssl pkcs12 -in service-principal.pfx -out service-principal.pem -nodes -passin pass:
      cat service-principal.pem
      ls -la
    displayName: 'What is in the cert variable?'

  # AZ LOGIN USING TERRAFORM SERVICE PRINCIPAL
  - script: |
      az login --service-principal -u "$(sp-client-id-tf-0693)" -p "service-principal.pem" --tenant "$(sp-tenant-id-tf-0693)"
    displayName: 'Login the az cli'

  - script: |
      cd iac
      echo '#######Terraform Init########'
      terraform init -backend-config="storage_account_name=$(TF_STORAGE_ACCT_NAME)" -backend-config="container_name=$(TF_STORAGE_CONT_NAME)" -backend-config="access_key=$(ak-backend-sa-0693)" -backend-config="key=$(TF_STATE_FILE)" 
      echo '#######Terraform Plan########'
      terraform plan -var="clientId=$(sp-client-id-tf-0693)" -var="tenantId=$(sp-tenant-id-tf-0693)" -var="subscriptionId=$(sp-subscription-id-tf-0693)" -var="vmsize=${{ parameters.vmsize }}" -var="storage_account_rg=${{ parameters.storage_account_rg }}" -out="out.plan" 
      echo '#######Terraform Apply########'
      terraform apply out.plan
    displayName: 'Terraform Init, Plan and Apply '

  - script: |
      # Setup and run the sequencing job
      set -x  
      cd iac
      terraform output -json private_key | jq -r . > ../ssh_key; chmod 0600 ../ssh_key
      terraform output -json vm_ip | jq -r . > ../vm_ip_address
      terraform output -json vm_name | jq -r . > ../vm_name 
      terraform output -json vm_rg | jq -r . > ../vm_rg
      terraform output -json vm_datadisk | jq -r . > ../vm_datadisk
    displayName: 'Get outputs needed by all scripts and store locally'
  
  - script: |
      set -x
      az vm start -n $(cat ./vm_name) -g $(cat ./vm_rg)
      az vm user reset-ssh -n $(cat ./vm_name) -g $(cat ./vm_rg)
    condition: always()
    displayName: 'Start VM if not running' 
  
  - script: |
      set -x
      echo "Using Storage Account ${{parameters.STORAGE_ACCOUNT}}"
      cat <<-EOF > download-batch.sh
        az login --identity
        az storage blob download-batch --source ${{parameters.INPUT_CONTAINER}} --pattern ${{parameters.INPUT_PATH}} --account-name ${{parameters.STORAGE_ACCOUNT}} --destination /data/input --auth-mode login
      EOF
      cat download-batch.sh
      ls -la
      cat download-batch.sh | ssh -i ssh_key -o StrictHostKeyChecking=no azureuser@$(cat ./vm_ip_address) 
    displayName: 'Download fastq files from storage account for processing'

  - script: |
      set -x
      #Initialize the the remove environment
      cat ./initialize-env.sh | ssh -i ssh_key -o StrictHostKeyChecking=no azureuser@$(cat ./vm_ip_address)
      #Run the job script on the remote agent
      cat ./job.sh | ssh -i ssh_key -o StrictHostKeyChecking=no azureuser@$(cat ./vm_ip_address)
    displayName: 'Run sequencing job'

  - script: |
      set -x
      echo "Using Storage Account ${{parameters.STORAGE_ACCOUNT}}"
      cat <<-EOF > upload-batch.sh
        az login --identity
        az storage blob upload-batch -d sequences -s /data/assembly/ --account-name ${{parameters.STORAGE_ACCOUNT}} --destination-path $(date +'%m%d%Y-%H%M%S') --auth-mode login
      EOF
      cat upload-batch.sh | ssh -i ssh_key -o StrictHostKeyChecking=no azureuser@$(cat ./vm_ip_address) 
    displayName: 'Upload results to storage account'
  
  - script: |
      set -x
      az snapshot create -n $(date +'%m%d%Y-%H%M%S')-snap -g $(cat ./vm_rg) --source $(cat ./vm_datadisk)
    displayName: 'Snapshot data disk'
    condition: ${{ parameters.snapshot }}

  - script: |
      set -x
      az vm deallocate -n $(cat ./vm_name) -g $(cat ./vm_rg)
    condition: ${{ parameters.stopvm }}
    displayName: 'Stop and deallocate the VM'
  
  - script: |
      # Tear down the environment
      set -x
      cd iac
      echo '#######Terraform Destroy########'
      terraform destroy --auto-approve -var="clientId=$(sp-client-id-tf-0693)" -var="tenantId=$(sp-tenant-id-tf-0693)" -var="subscriptionId=$(sp-subscription-id-tf-0693)" -var="vmsize=${{ parameters.vmsize }}" -var="storage_account_rg=${{ parameters.storage_account_rg }}"
    condition: ${{ parameters.destroy }}
    displayName: 'Terraform Destroy'

